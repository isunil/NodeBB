{"version":3,"sources":["node_modules/nodebb-plugin-composer-default/static/lib/composer/drafts.js"],"names":["define","drafts","saveThrottleId","saving","init","postContainer","postData","bodyEl","find","draftIconEl","on","resetTimeout","setTimeout","saveDraft","clearTimeout","getDraft","save_id","console","warn","localStorage","getItem","get","title","text","raw","canSave","length","val","setItem","removeClass","addClass","removeDraft","updateVisibility","removeItem","set","add","open","JSON","parse","e","idx","indexOf","push","splice","stringify"],"mappings":"AAAA,aAIAA,OAAO,kBAAmB,WAEzB,IAAIC,KACJ,IAAIC,EACJ,IAAIC,EAAS,MAEbF,EAAOG,KAAO,SAASC,EAAeC,GACrC,IAAIC,EAASF,EAAcG,KAAK,YAChC,IAAIC,EAAcJ,EAAcG,KAAK,eAErCD,EAAOG,GAAG,QAAS,WAClBC,IAEAT,EAAiBU,WAAW,WAC3BC,EAAUR,EAAeI,EAAaH,IACpC,QAIL,SAASK,IACR,GAAIT,EAAgB,CACnBY,aAAaZ,GACbA,EAAiB,GAKnBD,EAAOc,SAAW,SAASC,GAC1BC,QAAQC,KAAK,8EACb,OAAOC,aAAaC,QAAQJ,IAG7Bf,EAAOoB,IAAM,SAASL,GACrB,OACCM,MAAOH,aAAaC,QAAQJ,EAAU,UACtCO,KAAMJ,aAAaC,QAAQJ,KAI7B,SAASH,EAAUR,EAAeI,EAAaH,GAC9C,IAAIkB,EACJ,IAAIF,EAEJ,GAAIG,KAAanB,GAAYA,EAASU,SAAWX,EAAcqB,OAAQ,CACtEJ,EAAQjB,EAAcG,KAAK,eAAemB,MAC1CH,EAAMnB,EAAcG,KAAK,YAAYmB,MACrC,GAAIH,EAAIE,OAAQ,CACfP,aAAaS,QAAQtB,EAASU,QAASQ,GACvCL,aAAaS,QAAQtB,EAASU,QAAU,SAAUM,GAClDb,EAAYoB,YAAY,UACxBjB,WAAW,WACVH,EAAYqB,SAAS,gBAEhB,CACN7B,EAAO8B,YAAYzB,EAASU,WAK/Bf,EAAO8B,YAAc,SAASf,GAC7B,IAAKA,EAAS,CACb,OAEDL,IAEAV,EAAO+B,iBAAiB,YAAahB,GACrCf,EAAO+B,iBAAiB,OAAQhB,GAEhCG,aAAac,WAAWjB,GACxBG,aAAac,WAAWjB,EAAU,UAClC,QAGDf,EAAO+B,iBAAoB,SAAUE,EAAKlB,EAASmB,GAClD,IAAKV,MAAcT,EAAS,CAC3B,OAGD,IACC,IAAIoB,EAAOjB,aAAaC,QAAQ,UAAYc,GAC5CE,EAAOA,EAAOC,KAAKC,MAAMF,MACxB,MAAOG,GACRtB,QAAQC,KAAK,wDACb,IAAIkB,KAEL,IAAII,EAAMJ,EAAKK,QAAQzB,GAEvB,GAAImB,GAAOK,KAAS,EAAG,CACtBJ,EAAKM,KAAK1B,QACJ,IAAKmB,GAAOK,KAAS,EAAG,CAC9BJ,EAAKO,OAAOH,EAAK,GAGlBrB,aAAaS,QAAQ,UAAYM,EAAKG,KAAKO,UAAUR,KAGtD,SAASX,IACR,GAAItB,EAAQ,CACX,OAAOA,EAGR,IACCgB,aAAaS,QAAQ,OAAQ,QAC7BT,aAAac,WAAW,QACxB9B,EAAS,KACT,OAAO,KACN,MAAMoC,GACPpC,EAAS,MACT,OAAO,OAIT,OAAOF","file":"node_modules/nodebb-plugin-composer-default/static/lib/composer/drafts.js","sourcesContent":["'use strict';\r\n\r\n/* globals define */\r\n\r\ndefine('composer/drafts', function() {\r\n\r\n\tvar drafts = {};\r\n\tvar\tsaveThrottleId;\r\n\tvar saving = false;\r\n\r\n\tdrafts.init = function(postContainer, postData) {\r\n\t\tvar bodyEl = postContainer.find('textarea');\r\n\t\tvar draftIconEl = postContainer.find('.draft-icon');\r\n\r\n\t\tbodyEl.on('keyup', function() {\r\n\t\t\tresetTimeout();\r\n\r\n\t\t\tsaveThrottleId = setTimeout(function() {\r\n\t\t\t\tsaveDraft(postContainer, draftIconEl, postData);\r\n\t\t\t}, 1000);\r\n\t\t});\r\n\t};\r\n\r\n\tfunction resetTimeout() {\r\n\t\tif (saveThrottleId) {\r\n\t\t\tclearTimeout(saveThrottleId);\r\n\t\t\tsaveThrottleId = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t// deprecated, for removal v1.14.x\r\n\tdrafts.getDraft = function(save_id) {\r\n\t\tconsole.warn('[composer/drafts] drafts.getDraft is deprecated! Use drafts.get() instead.');\r\n\t\treturn localStorage.getItem(save_id);\r\n\t};\r\n\r\n\tdrafts.get = function(save_id) {\r\n\t\treturn {\r\n\t\t\ttitle: localStorage.getItem(save_id + ':title'),\r\n\t\t\ttext: localStorage.getItem(save_id),\r\n\t\t}\r\n\t}\r\n\r\n\tfunction saveDraft(postContainer, draftIconEl, postData) {\r\n\t\tvar raw;\r\n\t\tvar title;\r\n\r\n\t\tif (canSave() && postData && postData.save_id && postContainer.length) {\r\n\t\t\ttitle = postContainer.find('input.title').val();\r\n\t\t\traw = postContainer.find('textarea').val();\r\n\t\t\tif (raw.length) {\r\n\t\t\t\tlocalStorage.setItem(postData.save_id, raw);\r\n\t\t\t\tlocalStorage.setItem(postData.save_id + ':title', title);\r\n\t\t\t\tdraftIconEl.removeClass('active');\r\n\t\t\t\tsetTimeout(function () {\r\n\t\t\t\t\tdraftIconEl.addClass('active');\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tdrafts.removeDraft(postData.save_id);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tdrafts.removeDraft = function(save_id) {\r\n\t\tif (!save_id) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tresetTimeout();\r\n\t\t// Remove save_id from list of open and available drafts\r\n\t\tdrafts.updateVisibility('available', save_id);\r\n\t\tdrafts.updateVisibility('open', save_id);\r\n\r\n\t\tlocalStorage.removeItem(save_id);\r\n\t\tlocalStorage.removeItem(save_id + ':title');\r\n\t\treturn;\r\n\t};\r\n\r\n\tdrafts.updateVisibility =  function (set, save_id, add) {\r\n\t\tif (!canSave() || !save_id) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tvar open = localStorage.getItem('drafts:' + set);\r\n\t\t\topen = open ? JSON.parse(open) : [];\r\n\t\t} catch (e) {\r\n\t\t\tconsole.warn('[composer/drafts] Could not read list of open drafts');\r\n\t\t\tvar open = [];\r\n\t\t}\r\n\t\tvar idx = open.indexOf(save_id);\r\n\r\n\t\tif (add && idx === -1) {\r\n\t\t\topen.push(save_id);\r\n\t\t} else if (!add && idx !== -1) {\r\n\t\t\topen.splice(idx, 1);\r\n\t\t}\t// otherwise do nothing\r\n\r\n\t\tlocalStorage.setItem('drafts:' + set, JSON.stringify(open));\r\n\t};\r\n\r\n\tfunction canSave() {\r\n\t\tif (saving) {\r\n\t\t\treturn saving;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tlocalStorage.setItem('test', 'test');\r\n\t\t\tlocalStorage.removeItem('test');\r\n\t\t\tsaving = true;\r\n\t\t\treturn true;\r\n\t\t} catch(e) {\r\n\t\t\tsaving = false;\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\treturn drafts;\r\n});"]}